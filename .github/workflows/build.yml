name: Build release binary
on:
  release:
    types: [published]
  #push:
  #  tags:
  #  - v*.*.*

jobs:
  build-win64:
    name: Build x64 Windows binary
    runs-on: windows-2019
    env:
      BUILD_ARCH: x64
      BUILD_LOGLEVEL: verbose
    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/setup-python@v4
        id: py
        with:
          python-version: '2.7'
      - uses: actions/checkout@v3
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: npm install --production --ignore-scripts
      - run: (cd nexe && npm install --production)
      - run: (cd nexe && node build)
      - run: move nexe\parpar.exe parpar.exe && 7z a -t7z -mx=9 parpar.7z parpar.exe
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./parpar.7z
          asset_name: parpar-${{ steps.get_release.outputs.tag_name }}-win64.7z
          asset_content_type: application/octet-stream
  
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        static:
        - name: glibc
          flag: --partly-static
        - name: static
          flag: --fully-static
        target:
        - xcc: 
          arch: x64
          xz_bcj: --x86
          name: amd64
          no_lto: 
          ubuntu: '22.04'
          glibc: '2.35'
          configure: 
        - xcc: aarch64-linux-gnu-
          arch: arm64
          xz_bcj: # --arm64 # requires xz utils >=5.4 to decompress
          name: aarch64
          no_lto: 
          ubuntu: '22.04'  # gcc-11 needed for SVE support
          glibc: '2.35'
          configure: 
        #- xcc: arm-linux-gnueabihf-
        #  arch: armhf
        #  xz_bcj: --arm
        #  name: armv7l
        #  no_lto: 1  # AArch32 compilers don't like mixing FPU modes with LTO [https://github.com/sabnzbd/#sabctools/issues/56#issuecomment-1151994494]
        #  ubuntu: '20.04'
        #  glibc: '2.31'
        #  configure: --with-arm-float-abi=hard --with-arm-fpu=vfpv3-d16
    name: Build ${{ matrix.target.name }} Linux ${{ matrix.static.name }} binary
    runs-on: ubuntu-${{ matrix.target.ubuntu }}
    env:
      BUILD_ARCH: ${{ matrix.target.arch }}
      BUILD_LOGLEVEL: verbose
      BUILD_CONFIGURE: ${{ matrix.target.configure }}
      BUILD_STATIC: ${{ matrix.static.flag }}
      BUILD_NO_LTO: ${{ matrix.target.no_lto }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: py
        with:
          python-version: '3.9' # workaround "cannot import name 'Mapping' from 'collections'" error
      - uses: cyberjunk/gha-ubuntu-cross@v2
        with:
          arch: ${{ matrix.target.arch }}
        if: ${{ matrix.target.arch != 'x64' }}
      - uses: ryankurte/action-apt@v0.3.0
        with:
          arch: i386  # '-m32' switch doesn't work without this
          packages: "libstdc++-$(c++ -dumpversion)-dev:i386 libc6-dev:i386"
        if: ${{ matrix.target.arch == 'armhf' }}
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: npm install --production --ignore-scripts
      - run: (cd nexe && npm install --production)
      - run: (cd nexe && node build)
        env:
          CC: ${{ matrix.target.xcc }}gcc
          CXX: ${{ matrix.target.xcc }}g++
          CC_host: cc
          CXX_host: c++
      - run: xz -9e ${{ matrix.target.xz_bcj }} --lzma2 nexe/parpar -c > parpar.xz
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./parpar.xz
          asset_name: parpar-${{ steps.get_release.outputs.tag_name }}-linux-${{ matrix.static.name }}-${{ matrix.target.name }}.xz
          asset_content_type: application/octet-stream

  build-mac-x64:
    name: Build x64 MacOS binary
    runs-on: macos-latest
    env:
      BUILD_ARCH: x64
      BUILD_LOGLEVEL: verbose
    steps:
      - uses: actions/checkout@v3
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: npm install --production --ignore-scripts
      - run: (cd nexe && npm install --production)
      - run: (cd nexe && node build)
      - run: xz -9e --x86 --lzma2 nexe/parpar -c > parpar.xz
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./parpar.xz
          asset_name: parpar-${{ steps.get_release.outputs.tag_name }}-macos-x64.xz
          asset_content_type: application/octet-stream
